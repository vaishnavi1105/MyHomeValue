# -*- coding: utf-8 -*-
"""Untitled31.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SJr-1tVEARWg5p97qUuN4gdyWCcV9naH
"""

import pandas as pd

# Load the dataset (assuming it's in CSV format)
df = pd.read_csv('test.csv')

# Check the structure of the data
print(df.head())
print(df.info())

# Check for the correct column name
print(df.columns) # Print all column names

# Separate features and target variable
X = df.drop(columns=['protein_name'])
y = df['protein_name']

# Handle missing data (if any)
X.fillna(X.mean(), inplace=True)

# Normalize the data
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split the data into training and test sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Initialize Decision Tree
dt_model = DecisionTreeClassifier(random_state=42)

# Train the model
dt_model.fit(X_train, y_train)

# Predictions
y_pred_dt = dt_model.predict(X_test)

# Evaluate the model
print(f'Decision Tree Accuracy: {accuracy_score(y_test, y_pred_dt)}')
from sklearn.svm import SVC

# Initialize SVM
svm_model = SVC(kernel='linear', random_state=42)

# Train the model
svm_model.fit(X_train, y_train)

# Predictions
y_pred_svm = svm_model.predict(X_test)

# Evaluate the model
print(f'SVM Accuracy: {accuracy_score(y_test, y_pred_svm)}')
from sklearn.naive_bayes import GaussianNB

# Initialize Naive Bayes
nb_model = GaussianNB()

# Train the model
nb_model.fit(X_train, y_train)

# Predictions
y_pred_nb = nb_model.predict(X_test)

# Evaluate the model
print(f'Naive Bayes Accuracy: {accuracy_score(y_test, y_pred_nb)}')
from sklearn.metrics import classification_report

print(f"Decision Tree:\n{classification_report(y_test, y_pred_dt)}")
print(f"SVM:\n{classification_report(y_test, y_pred_svm)}")
print(f"Naive Bayes:\n{classification_report(y_test, y_pred_nb)}")